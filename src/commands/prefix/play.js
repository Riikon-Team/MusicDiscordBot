import { joinVoiceChannel, createAudioResource } from '@discordjs/voice';
import Innertube from 'youtubei.js';

const innertube = await Innertube.create();

export default {
    name: 'play',
    description: 'Ph√°t nh·∫°c t·ª´ YouTube',
    async execute(message, args) {
        // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng kh√¥ng trong voice channel
        if (!message.member.voice.channel) {
            return message.reply('B·∫°n c·∫ßn v√†o m·ªôt k√™nh voice ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!');
        }

        // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ tham s·ªë t√¨m ki·∫øm
        if (!args.length) {
            return message.reply('Vui l√≤ng nh·∫≠p t√™n b√†i h√°t ho·∫∑c URL YouTube!');
        }

        const query = args.join(' ');
        const guildId = message.guild.id;

        try {
            const loadingMsg = await message.channel.send('üîé ƒêang t√¨m ki·∫øm...');

            // T√¨m ki·∫øm video tr√™n YouTube
            const search = await innertube.search(query, { type: 'video' });
            if (!search.videos.length) {
                await loadingMsg.edit('‚ùå Kh√¥ng t√¨m th·∫•y video n√†o kh·ªõp v·ªõi y√™u c·∫ßu c·ªßa b·∫°n!');
                return;
            }

            const video = search.videos[0];

            // L·∫•y th√¥ng tin client t·ª´ index.js
            const { cus } = message.client;
            const { connections, players, queues, currentSongs } = cus;

            // Kh·ªüi t·∫°o h√†ng ƒë·ª£i n·∫øu ch∆∞a t·ªìn t·∫°i
            if (!queues.has(guildId)) {
                queues.set(guildId, []);
            }

            // Th√™m b√†i h√°t v√†o h√†ng ƒë·ª£i
            const songInfo = {
                title: video.title,
                url: `https://www.youtube.com/watch?v=${video.id}`,
                thumbnail: video.thumbnails[0].url,
                duration: video.duration ? formatDuration(video.duration.seconds) : 'N/A',
                requestedBy: message.author.tag
            };

            queues.get(guildId).push(songInfo);

            await loadingMsg.edit(`‚úÖ **${video.title}** ƒë√£ ƒë∆∞·ª£c th√™m v√†o h√†ng ƒë·ª£i!`);

            // N·∫øu kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t, ph√°t b√†i h√°t ƒë·∫ßu ti√™n trong h√†ng ƒë·ª£i
            if (!currentSongs.has(guildId)) {
                playNextSong(message);
            }
        } catch (error) {
            console.error('Error in play command:', error);
            await message.channel.send('‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n!');
        }
    }
};

// H√†m ph√°t b√†i h√°t ti·∫øp theo
async function playNextSong(message) {
    const guildId = message.guild.id;
    const { cus } = message.client;
    const { connections, players, queues, currentSongs } = cus;

    const queue = queues.get(guildId);

    // N·∫øu h√†ng ƒë·ª£i tr·ªëng, x√≥a th√¥ng tin b√†i h√°t hi·ªán t·∫°i
    if (!queue || queue.length === 0) {
        currentSongs.delete(guildId);
        return;
    }

    // L·∫•y b√†i h√°t ƒë·∫ßu ti√™n t·ª´ h√†ng ƒë·ª£i
    const song = queue.shift();
    currentSongs.set(guildId, song);

    // Tham gia k√™nh voice n·∫øu ch∆∞a k·∫øt n·ªëi
    if (!connections.has(guildId)) {
        const connection = joinVoiceChannel({
            channelId: message.member.voice.channel.id,
            guildId: guildId,
            adapterCreator: message.guild.voiceAdapterCreator
        });
        connections.set(guildId, connection);
    }

    // T·∫°o player m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
    if (!players.has(guildId)) {
        const player = createAudioPlayer();
        players.set(guildId, player);

        const connection = connections.get(guildId);
        connection.subscribe(player);

        player.on('stateChange', (oldState, newState) => {
            if (newState.status === 'idle' && oldState.status !== 'idle') {
                playNextSong(message);
            }
        });
    }

    // Ph√°t b√†i h√°t s·ª≠ d·ª•ng yt-dlp
    try {
        console.log(`Ph√°t b√†i h√°t v·ªõi yt-dlp: ${song.title} (${videoId})`);

        // Ph∆∞∆°ng ph√°p 1: Th·ª≠ l·∫•y URL tr·ª±c ti·∫øp tr∆∞·ªõc
        try {
            const directUrl = await ytdlpManager.getDirectAudioUrl(videoId);
            console.log(`ƒê√£ nh·∫≠n ƒë∆∞·ª£c URL √¢m thanh tr·ª±c ti·∫øp, ƒëang ph√°t...`);

            const resource = createAudioResource(directUrl);
            player.play(resource);

            console.log(`ƒêang ph√°t b√†i h√°t: ${song.title}`);

            // Th√¥ng b√°o qua socket.io
            if (typeof cus.emitPlaybackUpdate === 'function') {
                cus.emitPlaybackUpdate(guildId, song, true);
                cus.emitQueueUpdate(guildId, cus.getQueue(guildId));
            }
            return;
        } catch (directUrlError) {
            console.error('Kh√¥ng th·ªÉ l·∫•y URL tr·ª±c ti·∫øp, ƒëang th·ª≠ ph∆∞∆°ng ph√°p streaming:', directUrlError);
            // Ti·∫øp t·ª•c v·ªõi ph∆∞∆°ng ph√°p streaming n·∫øu l·∫•y URL tr·ª±c ti·∫øp th·∫•t b·∫°i
        }

        // Ph∆∞∆°ng ph√°p 2: S·ª≠ d·ª•ng stream t·ª´ yt-dlp
        const audioStream = await ytdlpManager.streamAudio(videoId, {
            additionalArgs: [
                // Ch·ªçn audio ch·∫•t l∆∞·ª£ng cao
                '--audio-quality', '0',
            ]
        });

        // T·∫°o resource v√† ph√°t
        const resource = createAudioResource(audioStream, {
            inputType: StreamType.Arbitrary // Th√™m ki·ªÉu d·ªØ li·ªáu stream
        });

        player.play(resource);

        console.log(`ƒêang ph√°t b√†i h√°t: ${song.title}`);

        // Th√¥ng b√°o qua socket.io
        if (typeof cus.emitPlaybackUpdate === 'function') {
            cus.emitPlaybackUpdate(guildId, song, true);
            cus.emitQueueUpdate(guildId, cus.getQueue(guildId));
        }
    } catch (error) {
        console.error('L·ªói khi ph√°t nh·∫°c v·ªõi yt-dlp:', error);

        // Th·ª≠ ph∆∞∆°ng ph√°p d·ª± ph√≤ng n·∫øu yt-dlp th·∫•t b·∫°i
        console.log('Chuy·ªÉn sang ph∆∞∆°ng ph√°p d·ª± ph√≤ng...');

        // [Gi·ªØ m√£ d·ª± ph√≤ng s·ª≠ d·ª•ng youtubei.js ·ªü ƒë√¢y]
        // ... (c√°c ph∆∞∆°ng ph√°p d·ª± ph√≤ng hi·ªán t·∫°i)

        // N·∫øu t·∫•t c·∫£ ƒë·ªÅu th·∫•t b·∫°i, chuy·ªÉn sang b√†i ti·∫øp theo
        console.error(`Kh√¥ng th·ªÉ ph√°t b√†i ${song.title}. ƒêang chuy·ªÉn sang b√†i ti·∫øp theo...`);
        cus.currentSongs.delete(guildId);
        await setTimeout(1000);
        playNextSong(guildId, client, voiceChannel.id);
    }
}

// H√†m ƒë·ªãnh d·∫°ng th·ªùi gian
function formatDuration(seconds) {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;
}