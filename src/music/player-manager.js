import { joinVoiceChannel, createAudioPlayer } from '@discordjs/voice';
import { Innertube } from 'youtubei.js';

/**
 * T·∫°o v√† kh·ªüi t·∫°o qu·∫£n l√Ω tr√¨nh ph√°t nh·∫°c
 * @returns {Object} Player manager
 */
export async function createPlayerManager() {
    // Maps ƒë·ªÉ l∆∞u tr·ªØ th√¥ng tin
    const connections = new Map(); // L∆∞u k·∫øt n·ªëi voice
    const players = new Map();     // L∆∞u audio player
    const queues = new Map();      // L∆∞u h√†ng ƒë·ª£i b√†i h√°t
    const currentSongs = new Map(); // L∆∞u b√†i h√°t ƒëang ph√°t
    
    // Kh·ªüi t·∫°o YouTube API client v·ªõi c·∫•u h√¨nh n√¢ng cao
    const innertube = await Innertube.create({ 
        gl: 'VN',
        hl: 'vi',
        generate_session_locally: true, 
    });
    
    return {
        connections,
        players,
        queues,
        currentSongs,
        innertube,
        
        /**
         * Tham gia k√™nh voice
         * @param {Object} options Th√¥ng s·ªë k·∫øt n·ªëi
         * @returns {Object} Connection
         */
        joinVoice(options) {
            const { channelId, guildId, adapterCreator } = options;
            let connection = this.connections.get(guildId);
            
            if (!connection) {
                connection = joinVoiceChannel({
                    channelId,
                    guildId,
                    adapterCreator
                });
                this.connections.set(guildId, connection);
            } else if (connection.joinConfig.channelId !== channelId) {
                // N·∫øu ƒë√£ k·∫øt n·ªëi nh∆∞ng kh√°c k√™nh, k·∫øt n·ªëi l·∫°i
                connection.destroy();
                connection = joinVoiceChannel({
                    channelId,
                    guildId,
                    adapterCreator
                });
                this.connections.set(guildId, connection);
            }
            
            return connection;
        },
        
        /**
         * T·∫°o audio player m·ªõi ho·∫∑c l·∫•y player hi·ªán c√≥
         * @param {String} guildId ID c·ªßa guild
         * @returns {Object} Audio player
         */
        getPlayer(guildId) {
            let player = this.players.get(guildId);
            
            if (!player) {
                player = createAudioPlayer();
                this.players.set(guildId, player);
            }
            
            return player;
        },
        
        /**
         * Th√™m b√†i h√°t v√†o h√†ng ƒë·ª£i
         * @param {String} guildId ID c·ªßa guild
         * @param {Object} song Th√¥ng tin b√†i h√°t
         */
        addToQueue(guildId, song) {
            if (!this.queues.has(guildId)) {
                this.queues.set(guildId, []);
            }
            
            this.queues.get(guildId).push(song);
            
            return this.queues.get(guildId).length;
        },
        
        /**
         * L·∫•y h√†ng ƒë·ª£i c·ªßa guild
         * @param {String} guildId ID c·ªßa guild
         * @returns {Array} H√†ng ƒë·ª£i b√†i h√°t
         */
        getQueue(guildId) {
            return this.queues.get(guildId) || [];
        },
        
        /**
         * ƒê·∫∑t b√†i h√°t hi·ªán t·∫°i ƒëang ph√°t
         * @param {String} guildId ID c·ªßa guild
         * @param {Object} song Th√¥ng tin b√†i h√°t
         */
        setCurrentSong(guildId, song) {
            this.currentSongs.set(guildId, song);
        },
        
        /**
         * L·∫•y b√†i h√°t hi·ªán t·∫°i ƒëang ph√°t
         * @param {String} guildId ID c·ªßa guild
         * @returns {Object} Th√¥ng tin b√†i h√°t
         */
        getCurrentSong(guildId) {
            return this.currentSongs.get(guildId);
        },
        
        /**
         * T·∫°m d·ª´ng ph√°t nh·∫°c
         * @param {String} guildId ID c·ªßa guild
         * @returns {Boolean} Tr·∫°ng th√°i th√†nh c√¥ng
         */
        pausePlayback(guildId) {
            const player = this.players.get(guildId);
            if (player) {
                player.pause();
                
                // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√°t
                const song = this.currentSongs.get(guildId);
                if (song && typeof this.emitPlaybackUpdate === 'function') {
                    this.emitPlaybackUpdate(guildId, song, false, { isPaused: true });
                }
                
                return true;
            }
            return false;
        },
        
        /**
         * Ti·∫øp t·ª•c ph√°t nh·∫°c
         * @param {String} guildId ID c·ªßa guild
         * @returns {Boolean} Tr·∫°ng th√°i th√†nh c√¥ng
         */
        resumePlayback(guildId) {
            const player = this.players.get(guildId);
            if (player) {
                player.unpause();
                
                // C·∫≠p nh·∫≠t tr·∫°ng th√°i ph√°t
                const song = this.currentSongs.get(guildId);
                if (song && typeof this.emitPlaybackUpdate === 'function') {
                    this.emitPlaybackUpdate(guildId, song, true, { isPaused: false });
                }
                
                return true;
            }
            return false;
        },
        
        /**
         * T√¨m ƒë·∫øn v·ªã tr√≠ c·ª• th·ªÉ trong b√†i h√°t
         * @param {String} guildId ID c·ªßa guild
         * @param {Number} position V·ªã tr√≠ theo gi√¢y
         * @returns {Promise<Boolean>} Tr·∫°ng th√°i th√†nh c√¥ng
         */
        async seekToPosition(guildId, position) {
            const song = this.currentSongs.get(guildId);
            if (!song || !song.url) {
                return false;
            }
            
            // L·∫•y ID video t·ª´ URL
            let videoId;
            try {
                const urlObj = new URL(song.url);
                videoId = urlObj.searchParams.get('v') || song.url.split('youtu.be/')[1];
                if (videoId && videoId.includes('&')) {
                    videoId = videoId.split('&')[0];
                }
            } catch {
                videoId = song.url;
            }
            
            if (!videoId) return false;
            
            try {
                // C·∫≠p nh·∫≠t th√¥ng tin seek v√†o song
                song.seekPosition = position;
                
                // L·∫•y player hi·ªán t·∫°i
                const player = this.players.get(guildId);
                if (!player) return false;
                
                // D·ª´ng player hi·ªán t·∫°i
                player.stop();
                
                // C·∫≠p nh·∫≠t tr·∫°ng th√°i song v·ªõi v·ªã tr√≠ m·ªõi
                this.currentSongs.set(guildId, song);
                
                // S·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω ti·∫øp trong queue-manager.js
                return true;
            } catch (error) {
                console.error('L·ªói khi seek:', error);
                return false;
            }
        },
        
        /**
         * C·∫≠p nh·∫≠t tr·∫°ng th√°i bot v·ªõi th√¥ng tin b√†i h√°t hi·ªán t·∫°i
         * @param {Client} client Discord client
         * @param {String} guildId ID c·ªßa guild
         */
        updateBotStatus(client, guildId) {
            const song = this.currentSongs.get(guildId);
            if (song && client && client.user) {
                // C·∫≠p nh·∫≠t tr·∫°ng th√°i bot
                client.user.setActivity(`üéµ ${song.title.substring(0, 50)}${song.title.length > 50 ? '...' : ''}`, { 
                    type: 'LISTENING' 
                });
                
                // C·∫≠p nh·∫≠t nickname c·ªßa bot trong server n·∫øu c·∫ßn
                const guild = client.guilds.cache.get(guildId);
                if (guild && guild.me && guild.me.manageable) {
                    guild.me.setNickname(`üéµ DJ Bot`).catch(console.error);
                }
            }
        },
        
        /**
         * L·∫•y tr·∫°ng th√°i ph√°t hi·ªán t·∫°i
         * @param {String} guildId ID c·ªßa guild
         * @returns {Object} Tr·∫°ng th√°i ph√°t
         */
        getPlaybackState(guildId) {
            const song = this.currentSongs.get(guildId);
            const player = this.players.get(guildId);
            const queue = this.getQueue(guildId);
            
            return {
                currentSong: song,
                isPlaying: player ? !player.paused : false,
                isPaused: player ? player.paused : false,
                queueLength: queue.length,
                voiceChannelId: this.getCurrentVoiceChannel(guildId)
            };
        },
        
        /**
         * T√¨m ki·∫øm video tr√™n YouTube v·ªõi pagination
         * @param {String} query T·ª´ kh√≥a t√¨m ki·∫øm
         * @param {Object} options T√πy ch·ªçn t√¨m ki·∫øm
         * @returns {Promise<Object>} K·∫øt qu·∫£ t√¨m ki·∫øm v·ªõi th√¥ng tin ph√¢n trang
         */
        async searchVideos(query, options = {}) {
            const maxRetries = options.maxRetries || 3;
            let lastError = null;
            
            for (let attempt = 0; attempt < maxRetries; attempt++) {
                try {
                    // Th·ª±c hi·ªán t√¨m ki·∫øm
                    const results = await this.innertube.search(query, { 
                        type: "video",
                        page: options.page || 1
                    });
                    
                    // X·ª≠ l√Ω k·∫øt qu·∫£ t√¨m ki·∫øm ƒë·ªÉ l·∫•y th√¥ng tin c·∫ßn thi·∫øt
                    const videos = results.videos.map(video => ({
                        id: video.id,
                        title: video.title,
                        thumbnail: video.thumbnails?.[0]?.url || 'https://via.placeholder.com/150',
                        duration: video.duration ? formatDuration(video.duration.seconds) : 'N/A',
                        channel: video.channel?.name || 'Kh√¥ng r√µ',
                        views: video.view_count ? formatViews(video.view_count) : 'N/A'
                    }));
                    
                    // Tr·∫£ v·ªÅ d·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω v√† th√¥ng tin ph√¢n trang
                    return {
                        videos,
                        continuation: results.continuation,
                        totalResults: videos.length,
                        estimatedResults: results.estimated_results || videos.length,
                        currentPage: options.page || 1
                    };
                } catch (err) {
                    console.error(`L·ªói t√¨m ki·∫øm l·∫ßn ${attempt + 1}:`, err.message);
                    lastError = err;
                    // ƒê·ª£i tr∆∞·ªõc khi th·ª≠ l·∫°i (th·ªùi gian ƒë·ª£i tƒÉng d·∫ßn)
                    await new Promise(r => setTimeout(r, 1000 * (attempt + 1)));
                }
            }
            
            // N·∫øu t·∫•t c·∫£ c√°c l·∫ßn th·ª≠ ƒë·ªÅu th·∫•t b·∫°i
            throw lastError || new Error('Kh√¥ng th·ªÉ t√¨m ki·∫øm video');
        },
        
        /**
         * L·∫•y danh s√°ch k√™nh voice trong m·ªôt guild
         * @param {String} guildId ID c·ªßa guild
         * @param {Client} client Discord client
         * @returns {Array} Danh s√°ch k√™nh voice
         */
        getVoiceChannels(guildId, client) {
            const guild = client.guilds.cache.get(guildId);
            if (!guild) return [];
            
            return guild.channels.cache
                .filter(c => c.type === 2)
                .map(c => ({
                    id: c.id,
                    name: c.name,
                    members: c.members.size
                }));
        },
        
        /**
         * Ki·ªÉm tra xem bot c√≥ ƒëang trong voice channel kh√¥ng
         * @param {String} guildId ID c·ªßa guild
         * @returns {Boolean} Tr·∫°ng th√°i k·∫øt n·ªëi voice
         */
        isConnected(guildId) {
            return this.connections.has(guildId);
        },
        
        /**
         * L·∫•y ID k√™nh voice hi·ªán t·∫°i c·ªßa bot
         * @param {String} guildId ID c·ªßa guild
         * @returns {String|null} ID k√™nh voice ho·∫∑c null n·∫øu kh√¥ng k·∫øt n·ªëi
         */
        getCurrentVoiceChannel(guildId) {
            const connection = this.connections.get(guildId);
            return connection ? connection.joinConfig.channelId : null;
        }
    };
}

/**
 * Custom fetch v·ªõi x·ª≠ l√Ω l·ªói v√† th·ª≠ l·∫°i
 * @param {RequestInfo|URL} input URL ho·∫∑c th√¥ng tin y√™u c·∫ßu
 * @param {RequestInit} init T√πy ch·ªçn kh·ªüi t·∫°o cho fetch
 * @returns {Promise<Response>} K·∫øt qu·∫£ ph·∫£n h·ªìi
 */
async function customFetch(input, init = {}) {
    const maxRetries = 3;
    let lastError = null;
    
    for (let attempt = 0; attempt < maxRetries; attempt++) {
        try {
            const response = await fetch(input, init);
            if (!response.ok && response.status >= 500) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            return response;
        } catch (error) {
            console.error(`Fetch error (attempt ${attempt + 1}/${maxRetries}):`, error.message);
            lastError = error;
            // ƒê·ª£i m·ªôt th·ªùi gian tr∆∞·ªõc khi th·ª≠ l·∫°i (tƒÉng d·∫ßn)
            await new Promise(r => setTimeout(r, 1000 * (attempt + 1)));
        }
    }
    
    throw lastError || new Error('Fetch failed after multiple attempts');
}

// H√†m ƒë·ªãnh d·∫°ng th·ªùi l∆∞·ª£ng
function formatDuration(seconds) {
    if (!seconds) return 'N/A';
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;
}

// H√†m ƒë·ªãnh d·∫°ng s·ªë l∆∞·ª£t xem
function formatViews(viewCount) {
    if (!viewCount) return 'N/A';
    
    if (viewCount >= 1000000) {
        return `${(viewCount / 1000000).toFixed(1)}M`;
    }
    
    if (viewCount >= 1000) {
        return `${(viewCount / 1000).toFixed(1)}K`;
    }
    
    return viewCount.toString();
}